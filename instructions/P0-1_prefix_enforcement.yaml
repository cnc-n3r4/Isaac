feature: P0-1 Prefix Enforcement
complexity: LOW
priority: P0
estimated_effort: 2 hours

files_affected:
  - isaac/core/cli_command_router.py
  - tests/test_p0_fixes.py (new)

problem_statement: |
  Bare natural language input (e.g., "hello") is incorrectly routed to AI translator
  instead of being rejected with a helpful error message. Users must use "isaac" prefix
  for natural language commands.

implementation:
  - step: Add prefix validation in parse() method
    file: isaac/core/cli_command_router.py
    action: modify
    location: parse() method, line ~86, before routing to _handle_natural()
    code: |
      # In parse() method, after line 86 (command_string cleanup section)
      # Add this check BEFORE the natural language routing logic
      
      # Check for natural language prefix requirement
      if route_type == "NATURAL":
          # Natural language commands MUST start with "isaac "
          if not command_string.lower().startswith("isaac "):
              return CommandResult(
                  success=False,
                  status_symbol='⊘',
                  message="I have a name, use it.",
                  command=command_string,
                  session_id=self.session.id,
                  metadata={
                      "error_type": "missing_prefix",
                      "suggestion": f"Try: isaac {command_string}",
                      "hint": "Natural language commands require the 'isaac' prefix"
                  }
              )
      
      # Continue with normal routing if prefix check passes
      if route_type == "NATURAL":
          return self._handle_natural(command_string, original)

  - step: Create test file for P0 fixes
    file: tests/test_p0_fixes.py
    action: create
    code: |
      """
      Test suite for P0 critical fixes
      Tests prefix enforcement, strip logic, and casual pattern recognition
      """
      import pytest
      from isaac.core.cli_command_router import CLICommandRouter
      from isaac.core.session_manager import SessionManager
      from isaac.core.ai_translator import AITranslator
      
      
      @pytest.fixture
      def session():
          """Create test session"""
          return SessionManager()
      
      
      @pytest.fixture
      def router(session):
          """Create router with test session"""
          return CLICommandRouter(session)
      
      
      @pytest.fixture
      def translator():
          """Create AI translator for testing"""
          return AITranslator()
      
      
      # ============================================================================
      # P0-1: PREFIX ENFORCEMENT TESTS
      # ============================================================================
      
      def test_bare_natural_language_rejected(router):
          """
          Test that bare natural language (no 'isaac' prefix) is rejected.
          
          User types: "hello"
          Expected: Error with helpful message
          """
          result = router.execute("hello")
          
          assert not result.success, "Bare command should fail"
          assert result.status_symbol == '⊘', "Should use error symbol"
          assert "I have a name" in result.message, "Should have helpful error message"
          assert "isaac" in result.metadata.get("suggestion", ""), "Should suggest prefix"
      
      
      def test_bare_question_rejected(router):
          """
          Test that bare questions are also rejected.
          
          User types: "what time is it"
          Expected: Error requiring prefix
          """
          result = router.execute("what time is it")
          
          assert not result.success
          assert "I have a name" in result.message
          assert "isaac what time is it" in result.metadata.get("suggestion", "")
      
      
      def test_prefixed_natural_language_accepted(router):
          """
          Test that prefixed commands are NOT rejected (may fail later, but not at prefix check).
          
          User types: "isaac hello"
          Expected: Passes prefix check (gets to translator)
          """
          result = router.execute("isaac hello")
          
          # Should NOT be rejected with prefix error
          assert "I have a name" not in result.message, "Should not reject prefixed command"
          # May fail at translation stage, but not at prefix enforcement
      
      
      def test_shell_commands_bypass_prefix_check(router):
          """
          Test that shell/internal commands don't require prefix.
          
          User types: "ls" or "help"
          Expected: Should work without prefix
          """
          # Internal commands should work
          result_help = router.execute("help")
          assert "I have a name" not in result_help.message
          
          # Shell commands should be passed through
          result_ls = router.execute("ls")
          assert "I have a name" not in result_ls.message
      
      
      def test_case_insensitive_prefix_check(router):
          """
          Test that prefix check is case-insensitive.
          
          User types: "ISAAC hello" or "Isaac hello"
          Expected: Should pass prefix check
          """
          result_upper = router.execute("ISAAC hello")
          assert "I have a name" not in result_upper.message
          
          result_mixed = router.execute("Isaac hello")
          assert "I have a name" not in result_mixed.message

verification:
  - check: Bare commands are rejected
    test: Run router.execute("hello") and verify rejection
    expected: |
      CommandResult(
        success=False,
        status_symbol='⊘',
        message="I have a name, use it.",
        metadata contains suggestion
      )
  
  - check: Prefixed commands pass validation
    test: Run router.execute("isaac hello") and verify no prefix error
    expected: Should not contain "I have a name" message
  
  - check: Shell commands bypass check
    test: Run router.execute("ls") and verify works without prefix
    expected: Normal shell command execution
  
  - check: All P0-1 tests pass
    test: pytest tests/test_p0_fixes.py::test_bare_natural_language_rejected -v
    expected: 5 tests pass (bare rejected, question rejected, prefixed accepted, shell bypass, case insensitive)

rollback:
  - action: Remove prefix check code from parse() method
    location: cli_command_router.py, line ~90-105
  - action: Delete test file
    location: tests/test_p0_fixes.py
  - action: Run existing test suite to verify no regression
    command: pytest tests/ -v

dependencies:
  - SessionManager must be initialized
  - CommandResult class must support metadata field
  - Router parse() method must determine route_type correctly

risks:
  - LOW: Simple boolean check, well-isolated change
  - Could be too strict if users expect casual interaction without prefix
  - Mitigation: Clear helpful error message guides user to correct syntax

notes: |
  IMPORTANT CONTEXT:
  - This fix only applies to NATURAL language routing
  - Internal commands (help, list) and shell commands bypass this check
  - The route_type determination happens before this check
  - Prefix check is case-insensitive for better UX
  - Error metadata includes suggestion with correct syntax
  
  TESTING STRATEGY:
  - Test bare commands (should fail)
  - Test prefixed commands (should pass)
  - Test shell commands (should bypass)
  - Test case variations (should all work)
  
  INTEGRATION:
  - After this fix, P0-2 (strip logic) will handle removing prefix before translation
  - After P0-3 (casual patterns), "isaac hello" will actually work end-to-end

implementation_notes: |
  Code Location Details:
  - File: isaac/core/cli_command_router.py
  - Method: parse()
  - Insert point: After line 86, before _handle_natural() call
  - The route_type variable must already be determined (NATURAL, INTERNAL, or SHELL)
  
  Key Implementation Details:
  1. Check only applies when route_type == "NATURAL"
  2. Use .lower().startswith() for case-insensitive check
  3. Look for "isaac " with trailing space to avoid partial matches
  4. Return CommandResult immediately on failure (no further processing)
  5. Include metadata with suggestion for better UX
  
  Testing Priority:
  1. Verify rejection works (test_bare_natural_language_rejected)
  2. Verify suggestion is helpful (contains correct syntax)
  3. Verify prefixed commands pass (test_prefixed_natural_language_accepted)
  4. Verify bypass for non-natural commands (test_shell_commands_bypass_prefix_check)
