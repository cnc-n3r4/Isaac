feature: P0-2 Strip Isaac Prefix Before Translation
complexity: LOW
priority: P0
estimated_effort: 1 hour

files_affected:
  - isaac/core/cli_command_router.py
  - tests/test_p0_fixes.py (append tests)

problem_statement: |
  When user types "isaac hello" in REPL, the full string including "isaac" prefix
  gets sent to translator, causing pattern match failures. The translator should
  receive only "hello" for proper pattern matching.

implementation:
  - step: Strip prefix before translation in _handle_natural()
    file: isaac/core/cli_command_router.py
    action: modify
    location: _handle_natural() method, line ~236, before translator.translate() call
    code: |
      # In _handle_natural() method
      # Find the line: translation = translator.translate(original)
      # This should be around line 259
      
      # BEFORE (current code):
      # translation = translator.translate(original)
      
      # AFTER (strip prefix first):
      # Strip "isaac " prefix before translation (case-insensitive)
      # The prefix check in parse() ensures "isaac " exists, so safe to strip
      stripped_input = original
      if original.lower().startswith("isaac "):
          # Remove first occurrence only, preserve rest of string
          stripped_input = original[6:].strip()  # len("isaac ") = 6
      
      # Now translate the stripped input
      translation = translator.translate(stripped_input)
      
      # Continue with rest of method (use translation result as before)

  - step: Add tests for strip logic
    file: tests/test_p0_fixes.py
    action: modify
    location: After P0-1 tests, before P0-3 section
    code: |
      # ============================================================================
      # P0-2: STRIP PREFIX TESTS
      # ============================================================================
      
      def test_isaac_prefix_stripped_before_translation(translator):
          """
          Test that translator receives input WITHOUT 'isaac' prefix.
          
          This simulates what the router should do:
          1. User types: "isaac hello"
          2. Router strips to: "hello"
          3. Translator receives: "hello"
          4. Translator finds casual pattern
          """
          # Simulate the router's strip logic
          original = "isaac hello"
          stripped = original[6:].strip() if original.lower().startswith("isaac ") else original
          
          # Now translator should match casual pattern
          result = translator.translate(stripped)
          
          assert result is not None, "Should find pattern after stripping"
          assert result.confidence > 0.0, "Should have confidence in match"
          # After P0-3 implementation, this will match casual patterns
          # For now, just verify it's not None
      
      
      def test_strip_preserves_case_of_query(translator):
          """
          Test that stripping only removes prefix, preserves query case.
          
          User types: "isaac What Time Is It"
          Stripped: "What Time Is It"
          Pattern matching should still work (case-insensitive)
          """
          original = "isaac What Time Is It"
          stripped = original[6:].strip() if original.lower().startswith("isaac ") else original
          
          assert stripped == "What Time Is It", "Should preserve query case"
          
          result = translator.translate(stripped)
          # Should still match patterns (translator does case-insensitive matching)
          assert result is not None
      
      
      def test_strip_handles_multiple_spaces(translator):
          """
          Test handling of extra spaces after prefix.
          
          User types: "isaac    hello" (extra spaces)
          Stripped: "hello" (spaces trimmed)
          """
          original = "isaac    hello"
          stripped = original[6:].strip() if original.lower().startswith("isaac ") else original
          
          assert stripped == "hello", "Should trim extra spaces"
          
          result = translator.translate(stripped)
          assert result is not None
      
      
      def test_no_strip_if_no_prefix(translator):
          """
          Test that input without prefix is left unchanged.
          
          This shouldn't happen in normal flow (prefix check would reject it),
          but defensive programming requires handling it.
          """
          original = "hello"
          stripped = original[6:].strip() if original.lower().startswith("isaac ") else original
          
          assert stripped == "hello", "Should not modify if no prefix"
      
      
      def test_strip_case_insensitive(translator):
          """
          Test that stripping works with different case variations.
          
          "ISAAC hello" -> "hello"
          "Isaac hello" -> "hello"
          "iSaAc hello" -> "hello"
          """
          test_cases = [
              ("ISAAC hello", "hello"),
              ("Isaac hello", "hello"),
              ("iSaAc hello", "hello"),
              ("isaac HELLO", "HELLO"),  # Preserves query case
          ]
          
          for original, expected in test_cases:
              stripped = original[6:].strip() if original.lower().startswith("isaac ") else original
              assert stripped == expected, f"Failed for input: {original}"

verification:
  - check: Prefix is stripped correctly
    test: |
      Input: "isaac hello"
      After strip: "hello"
      Translator receives: "hello"
    expected: Stripped string has no "isaac" prefix
  
  - check: Case is preserved in query
    test: |
      Input: "isaac What Time"
      After strip: "What Time"
    expected: Query case unchanged
  
  - check: Extra spaces handled
    test: |
      Input: "isaac    hello"
      After strip: "hello"
    expected: Whitespace normalized
  
  - check: Integration with translator
    test: Run router.execute("isaac hello") end-to-end
    expected: Translator receives "hello", finds pattern (after P0-3)
  
  - check: All P0-2 tests pass
    test: pytest tests/test_p0_fixes.py -k "strip" -v
    expected: 5 strip-related tests pass

rollback:
  - action: Restore original translation call
    location: cli_command_router.py, _handle_natural() method
    change: |
      Remove:
        stripped_input = original
        if original.lower().startswith("isaac "):
            stripped_input = original[6:].strip()
        translation = translator.translate(stripped_input)
      
      Restore:
        translation = translator.translate(original)
  
  - action: Remove P0-2 tests
    location: tests/test_p0_fixes.py
    change: Delete test_isaac_prefix_stripped_before_translation and related tests

dependencies:
  - P0-1 must be implemented first (ensures "isaac" prefix exists)
  - AITranslator.translate() must accept string input
  - Pattern matching in translator must be case-insensitive

risks:
  - VERY LOW: Simple string operation, well-tested
  - Edge case: Empty string after strip (e.g., "isaac " with nothing after)
    - Mitigation: .strip() handles this, translator will return None for empty
  - Edge case: "isaac" without space (e.g., "isaachello")
    - Mitigation: startswith("isaac ") requires space, won't match

notes: |
  IMPORTANT CONTEXT:
  - This fix works in tandem with P0-1
  - P0-1 ensures input HAS "isaac " prefix before natural language routing
  - P0-2 REMOVES that prefix before pattern matching
  - Flow: "isaac hello" -> (P0-1 validates) -> (P0-2 strips) -> "hello" -> translator
  
  STRIP LOGIC DETAILS:
  - Use original[6:] because len("isaac ") = 6 characters
  - Use .lower().startswith() for case-insensitive check
  - Use .strip() to clean up any extra whitespace
  - Preserve case of actual query (only remove prefix)
  
  WHY NOT USE .replace()?
  - original.replace("isaac ", "", 1) would work but less explicit
  - String slicing [6:] is clearer about what we're doing
  - Both approaches are valid, slicing chosen for clarity
  
  TESTING STRATEGY:
  - Test basic strip: "isaac hello" -> "hello"
  - Test case preservation: "isaac What" -> "What"
  - Test whitespace: "isaac    hello" -> "hello"
  - Test case variations: "ISAAC hello" -> "hello"
  - Test no-prefix handling: "hello" -> "hello" (shouldn't happen, but defensive)

implementation_notes: |
  Code Location Details:
  - File: isaac/core/cli_command_router.py
  - Method: _handle_natural()
  - Line: ~259 (where translator.translate() is called)
  - Change is 5-line addition + 1-line modification
  
  Key Implementation Details:
  1. Add stripping logic IMMEDIATELY before translator.translate() call
  2. Check is case-insensitive: .lower().startswith("isaac ")
  3. Strip operation uses slice: original[6:]
  4. Clean up whitespace: .strip()
  5. Use stripped_input variable for clarity
  6. Original variable preserved for logging/display if needed
  
  Before/After Code:
  
  BEFORE:
  ```python
  translation = translator.translate(original)
  ```
  
  AFTER:
  ```python
  # Strip "isaac " prefix before translation
  stripped_input = original
  if original.lower().startswith("isaac "):
      stripped_input = original[6:].strip()
  
  translation = translator.translate(stripped_input)
  ```
  
  Testing Priority:
  1. Verify basic strip works (test_isaac_prefix_stripped_before_translation)
  2. Verify case preservation (test_strip_preserves_case_of_query)
  3. Verify whitespace handling (test_strip_handles_multiple_spaces)
  4. Verify edge cases (test_no_strip_if_no_prefix, test_strip_case_insensitive)
  
  Integration Test (after P0-3):
  ```python
  router.execute("isaac hello")
  # Should work end-to-end:
  # 1. P0-1 validates prefix exists
  # 2. P0-2 strips to "hello"
  # 3. P0-3 translator matches casual pattern
  # 4. User gets friendly response
  ```
